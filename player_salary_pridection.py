# -*- coding: utf-8 -*-
"""player salary pridection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Z3fZ-J4SbF-v2yfTvX5d0Bn7q9Eb8C-
"""

# Step 1: Install necessary libraries (uncomment if needed)
# !pip install pandas numpy matplotlib seaborn scikit-learn

# Step 2: Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 3: Create Sample Dataset (or you can load your CSV)
data = {
    'Age': [22, 25, 28, 24, 30, 27, 21, 23, 26, 29],
    'Experience': [1, 3, 6, 2, 7, 5, 1, 2, 4, 6],
    'MatchesPlayed': [15, 35, 60, 20, 80, 55, 10, 18, 40, 70],
    'GoalsScored': [3, 10, 18, 5, 25, 17, 1, 4, 12, 20],
    'Salary': [50000, 120000, 200000, 75000, 300000, 190000, 40000, 60000, 150000, 280000]
}

df = pd.DataFrame(data)

# Step 4: Explore the data
print(df.head())
print("\nDescriptive Stats:\n", df.describe())

# Step 5: Visualizations
sns.pairplot(df)
plt.suptitle("Feature Relationships", y=1.02)
plt.show()

# Correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

# Step 6: Feature selection
X = df[['Age', 'Experience', 'MatchesPlayed', 'GoalsScored']]
y = df['Salary']

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 9: Predict
y_pred = model.predict(X_test)

# Step 10: Evaluation
print("ðŸ“‰ Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("ðŸ“ˆ RÂ² Score:", r2_score(y_test, y_pred))

# Plotting predicted vs actual
plt.figure(figsize=(7, 5))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')
plt.xlabel("Actual Salary")
plt.ylabel("Predicted Salary")
plt.title("Actual vs Predicted Salary")
plt.grid(True)
plt.show()